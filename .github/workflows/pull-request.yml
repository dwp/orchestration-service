name: 'Pull Request'
on:
  pull_request:
    branches:
      - master
env:
  IMAGE_NAME: dwpdigital/orchestration-service

jobs:
  pull_request:

    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          DEBUG: 1
          SERVICES: dynamodb,iam,kms

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: terraform-setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.19
      - name: terraform-fmt
        id: fmt
        run: terraform fmt --recursive

      - name: tflint
        run: |
          pwd
          ls
          curl https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          output=""

          for d in $(find ./terraform/deploy -type d) ;do
            section=$(tflint -f json --force --disable-rule=aws_cloudwatch_log_group_invalid_name --config=./terraform/.tflint.hcl $d |jq -c '.issues[] | "_ISSUE FOUND:_ (\(.rule.name)) in \(.range.filename) line \(.range.start.line) - \(.range.end.line)"')
            output+=$(if [ ${#section} -gt 1 ] ; then echo "***ISSUE(S) FOUND IN ${d}***: ${section}|"; fi);
          done

          for d in $(find ./terraform/modules -type d) ;do
            section=$(tflint -f json --force --disable-rule=aws_cloudwatch_log_group_invalid_name --config=./terraform/.tflint.hcl $d |jq -c '.issues[] | "_ISSUE FOUND:_ (\(.rule.name)) in \(.range.filename) line \(.range.start.line) - \(.range.end.line)"')
            output+=$(if [ ${#section} -gt 1 ] ; then echo "***ISSUE(S) FOUND IN ${d}***: ${section}¢"; fi);
          done

          echo "::set-env name=TFLINT::$(echo ${output} | tr ':' '~' )"

      - name: comment-to-pr
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (process.env.TFLINT.length > 5){
              var str = process.env.TFLINT.replace(/\"/g,"").replace(/~/g, ":");
              var list = str.split("¢");
              list.pop()
              for (i = 0; i < list.length; i++) {
                await github.issues.createComment({
                              issue_number: context.issue.number,
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              body: list[i]
                })
              }
            }

      - name: build-docker-image
        run: |
          ./gradlew clean build
          docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: test
        run: ./gradlew build test

      - name: integration-test
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_SECRET_ACCESS_KEY: foo
          AWS_ACCESS_KEY_ID: bar
        run: ./gradlew integration

      - name: snyk-scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_NAME }}
          args: --file=Dockerfile --policy-path=./.snyk --severity-threshold=high --exclude-base-image-vulns --org=dwp-dataworks
