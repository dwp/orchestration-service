meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              if [ ! "$TEST_AMI" == "" ]; then
                echo "\necs_hardened_ami_id=\"$(cat dw-al2-ecs-ami/id)\"" >> terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              fi
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: orchestration-service
        inputs:
          - name: orchestration-service
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -out terraform.plan
            terraform apply -auto-approve terraform.plan
        inputs:
        - name: orchestration-service
        - name: terraform-config

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -detailed-exitcode
        inputs:
        - name: orchestration-service
        - name: terraform-config

    terminate-ecs-instances:
      task: terminate-ecs-instances
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              ami_id=$(cat dw-al2-ecs-ami/id)
              source /assume-role
              set +x
              instance_ids=$(aws ec2 describe-instances --filters Name=tag:Name,Values=orchestration-service-user-host-* Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId')
              for instance_id in $instance_ids;
                do
                  aws ec2 terminate-instances --instance-ids "$instance_id"
                done;
              desired_capacity=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$ASG_NAME" | jq -r '.AutoScalingGroups[0].DesiredCapacity')
              min_size=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$ASG_NAME" | jq -r '.AutoScalingGroups[0].MinSize')
              aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$ASG_NAME" --min-size 0 || exit 1
              count=0
              max_retries="$MAX_RETRIES"
              while [ "$count" -lt "$max_retries" ]
                do
                  sleep "$SLEEP_TIME"
                  instance_ids=$(aws ec2 describe-instances --filters Name=tag:Name,Values=orchestration-service-user-host-* Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId')
                  if [ ${#instance_ids} -ge 1 ]; then
                    instance_count=$(echo $instance_ids | tr ' ' '\n' | wc -l)
                  else
                    instance_count=0
                  fi
                  aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$ASG_NAME" --min-size "$min_size" || exit 1
                  if [[ $instance_count -eq $desired_capacity ]]; then
                    image_ids="$(aws ec2 describe-instances --instance-ids $instance_ids | jq -r '.Reservations[] | .Instances[] | .ImageId')"
                    for i in $image_ids; do
                      if [ ! "$i" == "$ami_id" ]; then
                        echo "Instance found with wrong AMI ID, Exiting..."
                        exit 1
                      fi;
                    done;
                    echo "All desired instances are running untested AMI, Exiting with success..."
                    exit 0
                  fi;
                  let "count+=1"
                done;
              echo "Cluster was unable to start desired instances with untested AMI in expected timeframe, Exiting with error..."
              exit 1
        inputs:
          - name: dw-al2-ecs-ami
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        ASG_NAME: orchestration-service-user-host-asg
        SLEEP_TIME: 60
        MAX_RETRIES: 10

    test-ecs-ami:
      task: test-ecs-ami
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              max_retries=5
              task_json="$(aws ecs run-task --cluster "$CLUSTER_NAME" --task-definition ami_ecs_test_td --overrides "{\"containerOverrides\": [{\"name\": \"test-ecs-ami\", \"command\": [\"sh\", \"-c\", \"sleep 300\"]}]}")"
              task_arn=$(echo $task_json | jq -r '.tasks[0].taskArn')
              while [ $max_retries > 0 ]
              do
                sleep 15
                task_json="$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks $task_arn)"
                container_status="$(echo "$task_json" | jq -r '.tasks[0].containers[0].lastStatus')"
                if [ "$container_status" == "RUNNING" ]; then
                  exit 0
                fi
                let "max_retries-=1"
              done
              exit 1
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        CLUSTER_NAME: orchestration-service-user-host

    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              AMI_ID=$(cat dw-al2-ecs-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              cd ami-builder-configs/results
              echo "$AMI_ID $RESULT" > "$PIPELINE.test"
              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
        inputs:
          - name: meta
          - name: dw-al2-ecs-ami
