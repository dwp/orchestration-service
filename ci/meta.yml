meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform/deploy/$DEPLOY_PATH/terraform.tfvars
              cp terraform/deploy/$DEPLOY_PATH/terraform.tf ../terraform-config
              cp terraform/deploy/$DEPLOY_PATH/terraform.tfvars ../terraform-config
          dir: orchestration-service
        inputs:
          - name: orchestration-service
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -out terraform.plan
            terraform apply -auto-approve terraform.plan
        inputs:
        - name: orchestration-service
        - name: terraform-config

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform plan -detailed-exitcode
        inputs:
        - name: orchestration-service
        - name: terraform-config

    terraform-output:
      task: terraform-output
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          dir: orchestration-service/terraform/deploy/app
          args:
          - -exc
          - |
            cp ../../../../terraform-config/terraform.tf .
            cp ../../../../terraform-config/terraform.tfvars .
            terraform init
            terraform workspace show
            terraform output -json > ../../../../terraform-output/outputs.json
        inputs:
        - name: orchestration-service
        - name: terraform-config
        outputs:
        - name: terraform-output

    cycle-old-user-host-instances:
      task: cycle-old-user-host-instances
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              ASG_NAME=$(jq -r '.ecs_user_host.value.asg.name' < terraform-output/outputs.json)
              ASG_INFO=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$ASG_NAME")
              ASG_INSTANCES=$(echo "$ASG_INFO" | jq -r '.AutoScalingGroups[0] | .Instances | .[] | .InstanceId')
              MAX_INSTANCE_LIFETIME=$(echo "$ASG_INFO" | jq -r '.AutoScalingGroups[0] | .MaxInstanceLifetime')
              for instance in $ASG_INSTANCES; do
                  INSTANCE_INFO=$(aws ec2 describe-instances --instance-ids "$instance" | jq -r '.Reservations[0].Instances[0]')
                  LAUNCH_TIME=$(echo "$INSTANCE_INFO" | jq -r '.LaunchTime' | sed 's/T/ /' | sed 's/\.[0-9][0-9][0-9]Z//g' | xargs -n 1 -I{} date -d {} +"%s")
                  INSTANCE_EXPIRATION_TIME=$((LAUNCH_TIME + MAX_INSTANCE_LIFETIME))
                  CURRENT_TIME=$(date +"%s")
                  if [ "$CURRENT_TIME" -gt "$INSTANCE_EXPIRATION_TIME" ]; then
                      INSTANCE_ID=$(echo "$INSTANCE_INFO" | jq -r '.InstanceId')
                      echo "Terminating instance $INSTANCE_ID"
                      aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
                      sleep 1
                  fi
              done
        inputs:
          - name: terraform-output
